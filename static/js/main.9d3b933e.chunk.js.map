{"version":3,"sources":["components/Button/index.js","components/Display/index.js","components/Stopwatch/index.js","App.js","reportWebVitals.js","index.js"],"names":["Button","label","onClick","id","className","DisplayComponent","time","sec_num","hours","Math","floor","minutes","seconds","formatTime","Stopwatch","buttonHandlers","Display","handleStart","handleReset","handleWait","App","useState","setTime","watch","setWatch","button","setButton","doubleClick","setDoubleClick","useEffect","click$","fromEvent","document","getElementById","pipe","buffer","debounceTime","map","list","length","filter","value","subscribe","e","timer$","Observable","observer","count","intervalId","setInterval","next","clearInterval","unsubscribe$","Subject","subscribtion$","takeUntil","prev","unsubscribe","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9d3b933e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css'\r\n\r\nconst Button = ({ label, onClick, id }) => {\r\n    return (\r\n        <button id={id} onClick={onClick} className='stopwatch-btn'>\r\n            <span>{label}</span>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport './styles.css'\r\n\r\nconst DisplayComponent = ({ time }) => {\r\n    const formatTime = (sec_num) => {\r\n        let hours = Math.floor(sec_num / 3600);\r\n        let minutes = Math.floor((sec_num - hours * 3600) / 60);\r\n        let seconds = sec_num - hours * 3600 - minutes * 60;\r\n\r\n        if (hours < 10) {\r\n            hours = '0' + hours;\r\n        }\r\n        if (minutes < 10) {\r\n            minutes = '0' + minutes;\r\n        }\r\n        if (seconds < 10) {\r\n            seconds = '0' + seconds;\r\n        }\r\n        return hours + ':' + minutes + ':' + seconds;\r\n    };\r\n    return <div className='stopwatch_display'>\r\n        {formatTime(time)}\r\n    </div>;\r\n};\r\n\r\nexport default DisplayComponent;\r\n\r\n","import React from 'react';\r\nimport Button from '../Button';\r\nimport DisplayComponent from '../Display';\r\n\r\nconst Stopwatch = ({ label, time, buttonHandlers }) => {\r\n\r\n    return (\r\n        <div className='wrapper'>\r\n            <DisplayComponent time={time}/>\r\n            <div className='btn-wrapper'>\r\n                <Button onClick={buttonHandlers.handleStart} label={label} />\r\n                <Button onClick={buttonHandlers.handleReset} label='Reset' />\r\n                <Button id='wait' onClick={buttonHandlers.handleWait} label='Wait' />\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Stopwatch;","import { useState, useEffect } from 'react';\nimport { Subject, Observable, fromEvent } from 'rxjs';\nimport { map, buffer, debounceTime, filter, takeUntil } from 'rxjs/operators';\nimport Stopwatch from './components/Stopwatch';\nimport './App.css'\n\nconst App = () => {\n  const [time, setTime] = useState(0);\n  const [watch, setWatch] = useState(false);\n  const [button, setButton] = useState('Start');\n  const [doubleClick, setDoubleClick] = useState(false);\n\n  useEffect(() => {\n    !watch ? setButton('Start') : setButton('Stop');\n\n    const click$ = fromEvent(document.getElementById('wait'), 'click');\n\n    const doubleClick$ = click$.pipe(\n        buffer(click$.pipe(debounceTime(300))),\n        map((list) => list.length),\n        filter((value) => value >= 2)\n    );\n\n    doubleClick$.subscribe((e) => {\n      setDoubleClick(true);\n    });\n\n    const timer$ = new Observable((observer) => {\n      let count = 0;\n      const intervalId = setInterval(() => {\n        observer.next((count += 1));\n      }, 1000);\n\n      return () => {\n        clearInterval(intervalId);\n      };\n    });\n\n    const unsubscribe$ = new Subject();\n    const subscribtion$ = timer$.pipe(takeUntil(unsubscribe$)).subscribe({\n      next: () => {\n        if (watch) {\n          setTime((prev) => prev + 1);\n        }\n      },\n    });\n\n    return () => {\n      subscribtion$.unsubscribe();\n    };\n  }, [watch]);\n\n  const buttonHandlers = {\n    handleStart: () => {\n      setWatch((prevState) => !prevState);\n      setDoubleClick(false);\n      if (button === 'Stop') {\n        setTime(0);\n        setDoubleClick(false);\n      }\n    },\n    handleWait: () => {\n      if (time !== 0 && doubleClick) {\n        setWatch(false);\n      }\n    },\n    handleReset: () => {\n      if ( time === 0 ) {\n        setTime(0);\n      } else{\n        setTime(0);\n        setWatch(true);\n      }\n      setDoubleClick(false);\n    },\n  };\n  return <Stopwatch time={time} label={button} buttonHandlers={buttonHandlers} />;\n};\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}